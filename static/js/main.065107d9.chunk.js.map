{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACpB,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAMC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACtB,gCACA,6BAAKF,IACL,4BAAIC,WCcDK,EAnBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCMdC,EAdC,SAAC,GAA+B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC3B,OACI,qBAAKV,UAAU,MAAf,SACK,uBACGA,UAAW,mCACXW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARF,SAACC,GACV,OACI,qBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,SAAhE,SACKJ,EAAMK,YC0CJC,G,wDAxCX,aAAc,IAAD,8BACT,gBAYJC,eAAe,SAACC,GACZ,EAAKC,SACD,CACIf,YAAYc,EAAME,OAAOC,SAdjC,EAAKC,MAAM,CACPvB,OAAO,GACPK,YAAa,IAJR,E,gEAQO,IAAD,OACfmB,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAAEpB,OAAQ4B,S,+BAWpH,IAAD,EACwBC,KAAKN,MAA1BvB,EADH,EACGA,OAAQK,EADX,EACWA,YACTyB,EAAe9B,EAAO+B,QAAO,SAAAC,GAC/B,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAEzD,OAAQjC,EAAOmC,OAGP,sBAAKvC,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAYU,aAAcuB,KAAKX,iBAC/B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUlB,OAAQ8B,SAN1B,6C,GA3BOM,cCMJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.065107d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({name,email,id})=>{ //Destructuring\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img  alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({ robots }) => {\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((user,i)=>{\r\n                return ( \r\n                    <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                     />\r\n                );\r\n             })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({ searchfield,searchChange })=>{\r\n    return (\r\n        <div className='pa2'>\r\n             <input\r\n                className= 'pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'5px solid black',height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\n\r\n class App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield: ''\r\n        }\r\n        \r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users =>this.setState({ robots: users }));\r\n        \r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState(\r\n            {\r\n                searchfield:event.target.value\r\n            }\r\n        )\r\n    }\r\n    render(){\r\n        const {robots, searchfield}=this.state;\r\n        const filteredRobots=robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return !robots.length ?\r\n           (<h1>Loading</h1>) :\r\n            (\r\n                <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox  searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n                </div>\r\n            );        \r\n    }\r\n    \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}